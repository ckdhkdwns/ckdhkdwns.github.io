{"componentChunkName":"component---src-templates-post-jsx","path":"/websocket/","result":{"data":{"site":{"siteMetadata":{"title":"ckdhkdwns"}},"markdownRemark":{"id":"a1fb6c90-d385-5383-b921-63831b3dd0fd","excerpt":"HTTP HTTP(HyperText Transfer Protocol)은  서버와 클라이언트의 사이에서 어떻게 메시지를 교환할지를 정해 놓은 규칙이다. 요청(Request)과 응답(Response)으로 구성되어 있으며, 일반적으로 80번 포트를 사용한다.  HTTP의 한계 HTTP는 클라이언트가 서버로 요청(Request)을 보내면 서버는 클라이언트에게 응…","html":"<h2>HTTP</h2>\n<p><b>HTTP(HyperText Transfer Protocol)</b>은  서버와 클라이언트의 사이에서 어떻게 메시지를 교환할지를 정해 놓은 규칙이다. 요청(Request)과 응답(Response)으로 구성되어 있으며, 일반적으로 80번 포트를 사용한다. </p>\n<img src='https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/HTTP_logo.svg/1200px-HTTP_logo.svg.png' style='transform: scale(0.5); left: 0'>\n<h2>HTTP의 한계</h2>\n<p><b>HTTP</b>는 클라이언트가 서버로 <b>요청(Request)</b>을 보내면 서버는 클라이언트에게 <b>응답(Response)</b>을 보낸다. 한 쪽 방향으로만 통신을 하는 <b>반이중</b> 방식을 사용하므로 실시간 통신에는 적합하지 않다.  </p>\n<p>물론  이런 문제는 Long polling 방식이나 Ajax를 사용해도 어느정도 해결이 가능하지만 데이터의 빠른 업데이트가 아주 중요한 어플리케이션에서는 실시간 업데이트가 아주 중요하기 때문에 <b>WebSocket</b>을 사용한다.</p>\n<h2>WebSocket</h2>\n<p><b>WebSocket</b>은 웹 서버와 웹 브라우저간 실시간 양방향 통신환경을 제공해주는 실시간 통신 기술이며 HTTP와 달리 웹소켓은 <b>전이중</b> 통신을 사용한다.  </p>\n<p>연결을 계속 유지하기 때문에 클라이언트와 한 번 연결이 되면 HTTP 사용시 필요없이 발생되는 HTTP와 TCP연결 트래픽을 피할 수 있다. 그리고 HTTP와 같은 80번 포트를 사용하기에 기업용 어플리케이션에 적용할 때 방화벽을 재설정하지 않아도 된다.</p>\n<h2>Stomp</h2>\n<p>스트리밍 텍스트 지향 메세지 프로토콜로 raw websocket보다 더 많은 프로그래밍 모델을 지원하며 여러 브로커를 사용 가능하다.</p>\n<hr>\n<h2>구현</h2>\n<p>진행중인 프로젝트에 구현된 채팅 기능의 소스이다.</p>\n<h3>WebSocketConfig.java</h3>\n<ol>\n<li><code class=\"language-text\">configureMessageBroker()</code><br>\n메세지를 주고 받을 <strong>Prefix</strong>를 설정한다.</li>\n<li><code class=\"language-text\">config.enableSimpleBroker('/sub')</code> - 클라이언트가 메세지를 <strong>구독할(subscribe)</strong> 주소를 지정한다.</li>\n<li><code class=\"language-text\">config.setApplicationDestinationPrefixes(\"/pub\")</code> - 클라이언트가 메세지를 <strong>보낼(publish)</strong> 주소를 지정한다.</li>\n<li><code class=\"language-text\">registerStompEndpoints()</code><br>\nWebsocket 연결을 위한 엔드포인트를 지정해준다. 코드에서는 <code class=\"language-text\">/chat</code>으로 지정해 줬다. </li>\n<li><code class=\"language-text\">configureClientInboundChannel()</code><br>\n웹 소켓 통신간에 중간에서 정보를 처리하는 <strong>Interceptor</strong>를 지정해준다.<br>\n프로젝트에서는 메세지 송수신간에 JWT 인증을 위해 Interceptor를 설정해줬다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// WebSocketConfig.java</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableWebSocketMessageBroker</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebSocketConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebSocketMessageBrokerConfigurer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">StompHandler</span> stompHandler<span class=\"token punctuation\">;</span> \n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureMessageBroker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBrokerRegistry</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">enableSimpleBroker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sub\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationDestinationPrefixes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pub\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerStompEndpoints</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StompEndpointRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/chat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOriginPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withSockJS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureClientInboundChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelRegistration</span> registration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registration<span class=\"token punctuation\">.</span><span class=\"token function\">interceptors</span><span class=\"token punctuation\">(</span>stompHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// StompHandler.java</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StompHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ChannelInterceptor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TokenProvider</span> tokenProvider<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">preSend</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StompHeaderAccessor</span> accessor <span class=\"token operator\">=</span> <span class=\"token class-name\">StompHeaderAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/** message의 토큰 유효성 검증 */</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>accessor<span class=\"token punctuation\">.</span><span class=\"token function\">getCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONNECT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tokenProvider<span class=\"token punctuation\">.</span><span class=\"token function\">validateToken</span><span class=\"token punctuation\">(</span>accessor<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstNativeHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"유저를 찾을 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>   \n        <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>MessageController.java</h3>\n<p>서버에서 메세지를 받으면 유저와 팀 정보를 통해 Message를 생성하고 송신자와 수신자 모두에게 메세지를 보내는 방식이다.  </p>\n<ol>\n<li><code class=\"language-text\">sendingOperations.convertAndSend(String path, Object messageObject)</code><br>\npath를 구독한 유저에게 messageObject를 보낸다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MessageMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/message\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDto</span> messageDto<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getUserByUserId</span><span class=\"token punctuation\">(</span>tokenProvider<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Team</span> team <span class=\"token operator\">=</span> teamService<span class=\"token punctuation\">.</span><span class=\"token function\">getTeamByTeamId</span><span class=\"token punctuation\">(</span>messageDto<span class=\"token punctuation\">.</span><span class=\"token function\">getTeamId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span>messageDto<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">unread</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>messageDto<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">createdDate</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">sender</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">receiver</span><span class=\"token punctuation\">(</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleUserByUsername</span><span class=\"token punctuation\">(</span>messageDto<span class=\"token punctuation\">.</span><span class=\"token function\">getReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">team</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    messageService<span class=\"token punctuation\">.</span><span class=\"token function\">createMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    \n    sendingOperations<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"/sub/chat/users/\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        <span class=\"token class-name\">MessageDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sendingOperations<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"/sub/chat/users/\"</span> <span class=\"token operator\">+</span> messageDto<span class=\"token punctuation\">.</span><span class=\"token function\">getReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        <span class=\"token class-name\">MessageDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Springboot Stomp로 채팅 구현하기","date":"September 26, 2022","update":null,"tags":["spring","stomp","websocket"],"series":null},"fields":{"slug":"/websocket/","readingTime":{"minutes":4.16}}},"seriesList":{"edges":[{"node":{"id":"f92a641b-9c82-53f8-aff3-0368380eb767","fields":{"slug":"/sql-injection/"},"frontmatter":{"title":"SQL Intection 실습"}}},{"node":{"id":"8610e26e-8d74-5948-91e2-e7adf963894d","fields":{"slug":"/2110번-공유기-설치/"},"frontmatter":{"title":"2110번 공유기 설치 Python"}}},{"node":{"id":"71201ba4-b6fc-59aa-90a3-dc595ea377dc","fields":{"slug":"/1389번-케빈-베이컨의-6단계-법칙/"},"frontmatter":{"title":"1389번 케빈 베이컨의 6단계 법칙 Python"}}},{"node":{"id":"7b1ba2b6-6a0a-540b-b77f-1b3910429f0f","fields":{"slug":"/1309번-동물원/"},"frontmatter":{"title":"1309번 동물원 Python"}}},{"node":{"id":"855d6dba-29cc-59ba-a9bd-a57d1257864a","fields":{"slug":"/1038번-감소하는-수/"},"frontmatter":{"title":"1038번 감소하는 수 Python"}}},{"node":{"id":"d9d91622-4795-5fcc-a924-8c29702d5aa4","fields":{"slug":"/1541번-잃어버린-괄호/"},"frontmatter":{"title":"1541번 잃어버린 괄호 Python"}}},{"node":{"id":"c3febc43-18c3-556a-a4d5-bb9002ef4a43","fields":{"slug":"/14502번-연구소/"},"frontmatter":{"title":"14502번 연구소 Python"}}},{"node":{"id":"c1b2ace6-822c-56b7-a4ab-fde0be99da25","fields":{"slug":"/install-java/"},"frontmatter":{"title":"Ubuntu에서 Java 설치"}}},{"node":{"id":"7afc75f6-822e-5c82-9b21-75cd172bfcb6","fields":{"slug":"/10026번-적록색약/"},"frontmatter":{"title":"10026번 적록색약 Python"}}},{"node":{"id":"1e01b2d9-da55-53be-acde-d9b12fc975a9","fields":{"slug":"/quick-start/"},"frontmatter":{"title":"Flask - Quick start"}}},{"node":{"id":"2b93cfa9-e2d6-5cff-892a-ae9ba42d5b79","fields":{"slug":"/crack-korean/"},"frontmatter":{"title":"Flask Response 한글 깨짐 현상"}}},{"node":{"id":"cd4df0d7-8640-529f-8cdb-5ea602e66369","fields":{"slug":"/gh-pages-deploy/"},"frontmatter":{"title":"gh-pages로 React 배포하기"}}},{"node":{"id":"011a1cae-6b08-5602-b5c2-651d84699833","fields":{"slug":"/init-in-goormide/"},"frontmatter":{"title":"VScode에 Spring 개발환경 구축하기"}}},{"node":{"id":"a1fb6c90-d385-5383-b921-63831b3dd0fd","fields":{"slug":"/websocket/"},"frontmatter":{"title":"Springboot Stomp로 채팅 구현하기"}}},{"node":{"id":"300ad57c-a011-5c1a-994c-3557c8004f46","fields":{"slug":"/jwt/"},"frontmatter":{"title":"JWT(JSON Web Token)"}}},{"node":{"id":"fdf83832-eef8-5fc4-bdee-b387145bd30a","fields":{"slug":"/ubuntu-sudo-apt-get-update/"},"frontmatter":{"title":"Ubuntu sudo apt-get update 다음 서명들은 공개키가 없기 때문에 인증할 수 없습니다"}}},{"node":{"id":"6bde8405-c68c-5334-9435-372186a24142","fields":{"slug":"/1916번-최소비용-구하기/"},"frontmatter":{"title":"1916번 최소비용 구하기 Python"}}},{"node":{"id":"e91f297d-08c4-5e27-a965-afd1d5aa1be0","fields":{"slug":"/7569번-토마토/"},"frontmatter":{"title":"7569번 토마토 Python"}}}]},"previous":{"fields":{"slug":"/init-in-goormide/"},"frontmatter":{"title":"VScode에 Spring 개발환경 구축하기"}},"next":{"fields":{"slug":"/jwt/"},"frontmatter":{"title":"JWT(JSON Web Token)"}}},"pageContext":{"id":"a1fb6c90-d385-5383-b921-63831b3dd0fd","series":null,"previousPostId":"011a1cae-6b08-5602-b5c2-651d84699833","nextPostId":"300ad57c-a011-5c1a-994c-3557c8004f46"}},"staticQueryHashes":[]}