{"componentChunkName":"component---src-templates-post-jsx","path":"/auto-deploy-with-github-action/","result":{"data":{"site":{"siteMetadata":{"title":"ckdhkdwns"}},"markdownRemark":{"id":"3b2e0da6-3eab-54df-a79e-004555eba529","excerpt":"Github Action이란 GitHub Actions는 GitHub에서 제공하는 개발 워크플로우 자동화 도구로, 코드의 빌드, 테스트, 배포, 그리고 프로젝트 관리와 관련된 다양한 작업을 자동화할 수 있습니다. 이를 통해 개발자들은 시간과 노력을 절약하고, 효율성을 높일 수 있습니다. 이벤트 기반 트리거 - GitHub Actions는 특정 이벤트에 기…","html":"<h3>Github Action이란</h3>\n<p><strong>GitHub Actions</strong>는 GitHub에서 제공하는 <strong>개발 워크플로우 자동화 도구</strong>로, 코드의 빌드, 테스트, 배포, 그리고 프로젝트 관리와 관련된 다양한 작업을 자동화할 수 있습니다. 이를 통해 개발자들은 시간과 노력을 절약하고, 효율성을 높일 수 있습니다.</p>\n<img src='/static/github-action-logo-8312883e85d246d5e9e42e3927f8a90b.png' width='60%'>\n<ol>\n<li><strong>이벤트 기반 트리거</strong> - GitHub Actions는 특정 이벤트에 기반하여 워크플로우를 실행할 수 있습니다. 예를 들어, 푸시, 풀 리퀘스트, 릴리즈, 스케줄링, 웹훅 등 다양한 이벤트가 있습니다.</li>\n<li><strong>재사용 가능한 Actions</strong> - 워크플로우를 구성하는 여러 단계는 재사용 가능한 작은 단위인 Actions로 구성됩니다. 개발자들은 GitHub 마켓플레이스에서 제공되는 Actions를 사용하거나, 직접 만들어 사용할 수 있습니다.</li>\n<li><strong>여러 언어 및 플랫폼 지원</strong> - GitHub Actions는 다양한 언어와 플랫폼을 지원합니다. JavaScript, Python, Java, Ruby, PHP, Go, Rust 등 대부분의 주요 프로그래밍 언어와 함께 macOS, Linux, Windows 등 다양한 운영체제에서 작동합니다.</li>\n<li><strong>병렬 실행 및 매트릭스 빌드</strong> - 여러 작업을 동시에 실행하거나, 다양한 환경에서 테스트를 수행하기 위해 매트릭스 빌드를 활용할 수 있습니다.</li>\n<li><strong>환경 변수 및 Secrets 관리</strong> - 워크플로우에서 사용할 환경 변수를 설정하거나, 민감한 정보를 안전하게 저장하고 사용할 수 있는 Secrets 기능을 제공합니다.</li>\n<li><strong>빌트인 호스팅</strong> - GitHub Actions는 빌트인 호스팅을 제공하여, 별도의 CI/CD 서비스를 사용할 필요가 없습니다. 이를 통해 개발자들은 간편하게 워크플로우를 구성하고 관리할 수 있습니다.</li>\n</ol>\n<p><strong>GitHub Actions</strong>를 사용하려면, 프로젝트의 .github/workflows 디렉터리에 워크플로우 YAML 파일을 작성해야 합니다. 워크플로우 파일에는 작업의 실행 조건, 실행 환경, 실행할 스텝 등에 대한 정보를 정의합니다. 이후 워크플로우를 실행하면, 각 작업은 독립적인 컨테이너에서 실행되며, 결과는 GitHub 저장소의 \"Actions\" 탭에서 확인할 수 있습니다.</p>\n<h3>사용 방법</h3>\n<p>기존에 Github Pages로 배포하던 Gatsby 블로그를 자동화하는 과정입니다.</p>\n<ol>\n<li><code class=\"language-text\">.github/workflows</code> 폴더에 <code class=\"language-text\">deploy.yml</code> 파일을 만듭니다. 파일 이름은 마음대로 지어도 무관합니다.</li>\n<li><code class=\"language-text\">deploy.yml</code> 파일에 다음과 같이 작성합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Node\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2.1.2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'14.x'</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cache dependencies\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ~/.npm\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>node<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/package-lock.json')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            ${{ runner.os }}-node-</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./public         </code></pre></div>\n<ul>\n<li><code class=\"language-text\">name</code> - 워크플로우의 이름을 지정합니다.</li>\n<li><code class=\"language-text\">on</code> - 워크플로우를 실행할 트리거를 정의합니다. 이 경우 push 이벤트가 발생하고, 그 푸시가 master 브랜치에 대한 것일 때 워크플로우가 실행됩니다.</li>\n<li><code class=\"language-text\">jobs</code> - 워크플로우에서 실행할 작업들을 정의합니다.</li>\n<li><code class=\"language-text\">runs-on</code> - 작업이 실행될 환경을 지정합니다. 이 경우 ubuntu-latest로 설정되어 있어, 가장 최신 버전의 Ubuntu에서 작업이 실행됩니다.</li>\n<li>\n<p><code class=\"language-text\">steps</code> - 작업을 구성하는 스텝들을 정의합니다.</p>\n<ul>\n<li><code class=\"language-text\">actions/checkout@v2</code> - 저장소의 코드를 체크아웃하는 스텝입니다.</li>\n<li><code class=\"language-text\">Setup Node</code> -: Node.js를 설정하는 스텝입니다. 이 경우 '14.x' 버전의 Node.js를 사용하도록 설정되어 있습니다.</li>\n<li><code class=\"language-text\">Cache dependencies</code> - 의존성 패키지를 캐시하는 스텝입니다. 캐시를 사용하면 빌드 시간을 줄일 수 있습니다.</li>\n<li><code class=\"language-text\">npm install</code> - 의존성 패키지를 설치하는 스텝입니다.</li>\n<li><code class=\"language-text\">npm run build</code> - 프로젝트를 빌드하는 스텝입니다. Gatsby 블로그의 경우, gatsby build 명령어를 실행합니다.</li>\n<li><code class=\"language-text\">Deploy</code> - 빌드된 프로젝트를 GitHub Pages에 배포하는 스텝입니다. <code class=\"language-text\">peaceiris/actions-gh-pages@v3</code> 액션을 사용하여 배포를 진행하고 <code class=\"language-text\">GITHUB_TOKEN</code>을 사용해 인증합니다. 빌드된 파일들이 있는 <code class=\"language-text\">./public</code> 디렉토리를 배포 대상으로 지정합니다.  </li>\n</ul>\n</li>\n</ul>\n<div></div> \n<ol start=\"3\">\n<li><code class=\"language-text\">master</code> 브랜치에 push합니다. 이후 해당 저장소의 <code class=\"language-text\">action</code> 탭을 확인해보면 정상적으로 배포가 된 것을 확인할 수 있습니다.</li>\n</ol>\n<p><img src=\"/static/action-result1-789b47948a326cc31242de93b585baa1.png\" alt=\"action-result1\"></p>","frontmatter":{"title":"GitHub Actions을 활용한 배포 자동화 구축하기","date":"April 22, 2023","update":null,"tags":["github-action","gatsby"],"series":null},"fields":{"slug":"/auto-deploy-with-github-action/","readingTime":{"minutes":5.995}}},"seriesList":{"edges":[{"node":{"id":"e7987a21-ba57-5c7e-b381-0d8f3dfa32e5","fields":{"slug":"/sql-injection/"},"frontmatter":{"title":"SQL Intection 실습"}}},{"node":{"id":"afc9487d-c380-5ed0-95b8-fbcb262d5b20","fields":{"slug":"/install-java/"},"frontmatter":{"title":"Ubuntu에서 Java 설치"}}},{"node":{"id":"97184d2d-2ee4-59b1-b11a-2334b7b5aaa7","fields":{"slug":"/crack-korean/"},"frontmatter":{"title":"Flask Response 한글 깨짐 현상"}}},{"node":{"id":"a1d16ed0-1666-5974-99fb-66eacb99a859","fields":{"slug":"/quick-start/"},"frontmatter":{"title":"Flask - Quick start"}}},{"node":{"id":"078a157d-f33a-5da8-ad18-d261b91dd5c4","fields":{"slug":"/gh-pages-deploy/"},"frontmatter":{"title":"gh-pages로 React 배포하기"}}},{"node":{"id":"da6803fa-9c81-5549-b8f6-6eabb901d753","fields":{"slug":"/init-in-goormide/"},"frontmatter":{"title":"VScode에 Spring 개발환경 구축하기"}}},{"node":{"id":"47462e05-5b2b-547d-a1f8-134ab0f34ca3","fields":{"slug":"/websocket/"},"frontmatter":{"title":"Springboot Stomp로 채팅 구현하기"}}},{"node":{"id":"765353ae-1d9a-5169-813e-26273d7b099c","fields":{"slug":"/jwt/"},"frontmatter":{"title":"JWT(JSON Web Token)"}}},{"node":{"id":"9dc42957-bf8a-5400-93e3-4f41385c9f04","fields":{"slug":"/ubuntu-sudo-apt-get-update/"},"frontmatter":{"title":"Ubuntu sudo apt-get update 다음 서명들은 공개키가 없기 때문에 인증할 수 없습니다"}}},{"node":{"id":"8e96eb32-9867-5be7-b544-d5dcdc566a4f","fields":{"slug":"/codespace-cannot-read-png/"},"frontmatter":{"title":"Github Codespace 웹 보기를 로드하는 동안 오류가 발생했습니다."}}},{"node":{"id":"3b2e0da6-3eab-54df-a79e-004555eba529","fields":{"slug":"/auto-deploy-with-github-action/"},"frontmatter":{"title":"GitHub Actions을 활용한 배포 자동화 구축하기"}}}]},"previous":{"fields":{"slug":"/리스트-중복제거/"},"frontmatter":{"title":"[Python] 리스트 내 원소들의 중복을 제거하기"}},"next":null},"pageContext":{"id":"3b2e0da6-3eab-54df-a79e-004555eba529","series":null,"previousPostId":"17126a96-98d7-53db-bb54-21e11b3608a7","nextPostId":null}},"staticQueryHashes":[]}