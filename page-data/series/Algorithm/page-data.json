{"componentChunkName":"component---src-templates-series-jsx","path":"/series/Algorithm","result":{"data":{"posts":{"nodes":[{"excerpt":"개념 트리나 그래프에서 한 루트로 탐색하다가 특정 상황에서 최대한 깊숙이 들어가서 확인한 뒤 다시 돌아가 다른 루트로 탐색하는 방식이다.  일반적으로 자기자신을 호출하는 재귀함수의 형태이지만 단순한 스택 배열로 구현되기도 한다. 백트래킹에 자주 사용된다. 너비 우선 탐색에 비해 간단하다. 단순 검색 속도 자체는 너비 우선 탐색에 비해 느리다.  구현 위 …","fields":{"slug":"/dfs/"},"frontmatter":{"date":"November 22, 2022","update":null,"title":"그래프 탐색 - DFS(Depth-First Search)","tags":["graph","search","dfs"]}},{"excerpt":"개념 루트 노드(혹은 다른 임의의 노드)에서 시작해서 인접한 노드를 먼저 탐색하는 방법이다.  큐(Queue)를 사용하여 구현한다. 즉, 선입선출(FIFO)을 원칙으로 탐색한다. 깊이 우선 탐색에 비해 복잡하다. 단순 검색 속도 자체는 깊이 우선 탐색에 비해 빠르다.  구현 위 코드의 를 시각화하면 아래와 같다.  과정 방문 우선순위 - 숫자가 작은 노드…","fields":{"slug":"/bfs/"},"frontmatter":{"date":"November 26, 2022","update":null,"title":"그래프 탐색 - BFS(Breadth-First Search)","tags":["graph","search","bfs"]}}]}},"pageContext":{"series":"Algorithm"}},"staticQueryHashes":[]}