{"componentChunkName":"component---src-templates-post-jsx","path":"/dijkstra/","result":{"data":{"site":{"siteMetadata":{"title":"ckdhkdwns"}},"markdownRemark":{"id":"003bdbb0-7b94-51fa-8b5b-10ab96b29750","excerpt":"개념 다익스트라(Dijkstra) 알고리즘은 다이나믹 프로그램을 활용한 대표적인 최단 경로(Shortest Path) 탐색 알고리즘이다. 흔히 인공위성 GPS 소프트웨어 등에서 가장 많이 사용된다. 다익스트라 알고리즘은 특정한 하나의 정점에서 다른 모든 정점으로 가는 최단 경로를 알려준다. (단, 음의 간선을 포함할 수 없다) 물론 현실 세계에서는 음의 …","html":"<h2>개념</h2>\n<p><strong>다익스트라(Dijkstra)</strong> 알고리즘은 다이나믹 프로그램을 활용한 대표적인 <em>최단 경로(Shortest Path) 탐색 알고리즘</em>이다. 흔히 인공위성 GPS 소프트웨어 등에서 가장 많이 사용된다. 다익스트라 알고리즘은 특정한 하나의 정점에서 다른 모든 정점으로 가는 최단 경로를 알려준다. (단, 음의 간선을 포함할 수 없다) 물론 현실 세계에서는 음의 간선이 존재하지 않기 때문에 다익스트라는 <u>현실 세계에 사용하기 매우 적합한 알고리즘</u> 중 하나이다.</p>\n<p>다익스트라 알고리즘이 다이나믹 프로그래밍 문제인 이유는 <strong>최단 거리는 여러 개의 최단 거리로 이루어져 있기 때문</strong>이다. 기본적으로 다익스트라는 하나의 최단 거리를 구할 때 그 이전까지 구했던 최단 거리 정보를 그대로 사용한다는 특징이 있다.</p>\n<h2>과정</h2>\n<p>노드 <code class=\"language-text\">1</code>을 출발 지점으로 각 노드까지의 최단 경로를 구한다. 단, 도달할 수 없는 경우에는 거리를 무한(INF)로 표시한다. 이후 1번 노드를 방문 처리한다.\n<img src=\"/static/dijk0-c44f038f924ed6ab4871fddacfef1129.svg\"></p>\n<p>현재 방문하지 않은 노드 중 가장 거리가 짧은 노드 <code class=\"language-text\">2</code>를 방문한다. <code class=\"language-text\">2</code>를 거쳐서 가는 경우를 모두 고려하여 최단 거리를 갱신해준다.\n<img src=\"/static/dijk1-a492aedd350d1c35216992bacf1c81e1.svg\"></p>\n<p><code class=\"language-text\">2</code>를 탐색할 노드로 선택하면, 노드 <code class=\"language-text\">1</code>에서 각 노드까지 직접 가는 거리와 노드 <code class=\"language-text\">2</code>를 거쳐서 가는 거리를 비교해서 <u>작은 값으로 갱신</u>해준다. 노드 <code class=\"language-text\">4</code>로 예를 들면, <code class=\"language-text\">1 ➝ 4</code>의 거리는 <u>무한(INF)</u>이지만 <code class=\"language-text\">1 ➝ 2 ➝ 4</code>의  거리는 <u>2 + 2 = 4</u> 이다. 그래서 <code class=\"language-text\">4</code>까지 가는 거리는 무한에서 4로 갱신된다. 노드 <code class=\"language-text\">2</code>의 방문하지 않은 인접 노드 모두를 이 방식으로 갱신해준다.</p>\n<p>갱신이 끝나면 다시 방문할 노드를 선택한다. 현재 방문하지 않은 노드 중 가장 거리가 짧은 노드 <code class=\"language-text\">3</code>을 방문한다. </p>\n<p><img src=\"/static/dijk2-b4a58283aa547d65f831c3f0828e1c63.svg\"></p>\n<p><em>2번</em> 과 같은 방식으로 노드 <code class=\"language-text\">3</code>을 거쳐서 가는 거리를 비교하고 갱신해준다. <code class=\"language-text\">1 ➝ 5</code> 의 거리는 <u>10</u>이지만 <code class=\"language-text\">1 ➝ 3 ➝ 5</code> 의 거리는 <u>3 + 1 = 4</u>로 더 작으므로 갱신된 것을 확인할 수 있다.</p>\n<p>이후 차례로 방문하지 않은 노드들을 방문한다. </p>\n<p><img src=\"/static/dijk3-df4fb48778eb49cdd126e9aadf69ae04.svg\">\n<img src=\"/static/dijk4-33a316f96921576360456d99ada4678d.svg\"></p>","frontmatter":{"title":"최단 경로 탐색 - 다익스트라(Dijkstra)","date":"November 26, 2022","update":null,"tags":["graph","shortest-path","dijkstra"],"series":"Algorithm"},"fields":{"slug":"/dijkstra/","readingTime":{"minutes":3.335}}},"seriesList":{"edges":[{"node":{"id":"0a1614d6-f955-55ce-a329-35b0db9ab2e5","fields":{"slug":"/dfs/"},"frontmatter":{"title":"그래프 탐색 - DFS(Depth-First Search)"}}},{"node":{"id":"6e39505e-6872-5e49-890e-3e158b8e5418","fields":{"slug":"/bfs/"},"frontmatter":{"title":"그래프 탐색 - BFS(Breadth-First Search)"}}},{"node":{"id":"003bdbb0-7b94-51fa-8b5b-10ab96b29750","fields":{"slug":"/dijkstra/"},"frontmatter":{"title":"최단 경로 탐색 - 다익스트라(Dijkstra)"}}}]},"previous":{"fields":{"slug":"/bfs/"},"frontmatter":{"title":"그래프 탐색 - BFS(Breadth-First Search)"}},"next":null},"pageContext":{"id":"003bdbb0-7b94-51fa-8b5b-10ab96b29750","series":"Algorithm","previousPostId":"6e39505e-6872-5e49-890e-3e158b8e5418","nextPostId":null}},"staticQueryHashes":[]}