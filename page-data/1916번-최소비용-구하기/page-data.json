{"componentChunkName":"component---src-templates-post-jsx","path":"/1916번-최소비용-구하기/","result":{"data":{"site":{"siteMetadata":{"title":"ckdhkdwns"}},"markdownRemark":{"id":"f5cb47e4-3119-51bb-b572-ae3a7e0e5116","excerpt":"백준 1916번 - 최소비용 구하기 문제 N개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 M개의 버스가 있다. 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. A번째 도시에서 B번째 도시까지 가는데 드는 최소비용을 출력하여라. 도시의 번호는 1부터 N까지이다. 입력 첫째 줄에 도시의 개수 N(…","html":"<p><a href=\"https://www.acmicpc.net/problem/1916\">백준 1916번 - 최소비용 구하기</a></p>\n<hr>\n<h2>문제</h2>\n<p>N개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 M개의 버스가 있다. 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. A번째 도시에서 B번째 도시까지 가는데 드는 최소비용을 출력하여라. 도시의 번호는 1부터 N까지이다.</p>\n<hr>\n<h2>입력</h2>\n<p>첫째 줄에 도시의 개수 N(1 ≤ N ≤ 1,000)이 주어지고 둘째 줄에는 버스의 개수 M(1 ≤ M ≤ 100,000)이 주어진다. 그리고 셋째 줄부터 M+2줄까지 다음과 같은 버스의 정보가 주어진다. 먼저 처음에는 그 버스의 출발 도시의 번호가 주어진다. 그리고 그 다음에는 도착지의 도시 번호가 주어지고 또 그 버스 비용이 주어진다. 버스 비용은 0보다 크거나 같고, 100,000보다 작은 정수이다.</p>\n<p>그리고 M+3째 줄에는 우리가 구하고자 하는 구간 출발점의 도시번호와 도착점의 도시번호가 주어진다. 출발점에서 도착점을 갈 수 있는 경우만 입력으로 주어진다.</p>\n<hr>\n<h2>출력</h2>\n<p>첫째 줄에 출발 도시에서 도착 도시까지 가는데 드는 최소 비용을 출력한다.</p>\n<hr>\n<h2>풀이</h2>\n<p>다익스트라 알고리즘을 통해 해결할 수 있다. </p>\n<h3>다익스트라(데이크스트라, Dijkstra)</h3>\n<p>다이나믹 프로그래밍을 활용한 대표적인 최단 경로(Shortest Path) 알고리즘이다. 다익스트라 알고리즘은 가능한 적은 비용으로 가장 빠르게 해답에 도달하는 경로를 찾아내는 대부분의 문제에 응용된다. </p>\n<ul>\n<li>루빅스 큐브를 푸는 프로그램</li>\n<li>내비게이션에서 지도상의 각 도시들의 최단경로</li>\n<li>미로탐색 알고리즘</li>\n</ul>\n<hr>\n<h3>주요 함수</h3>\n<ul>\n<li><code class=\"language-text\">getMinIndex()</code> - 방문하지 않은 노드들 중에서 거리가 가장 작은 노드의 인덱스를 가져온다.  </li>\n<li>\n<p><code class=\"language-text\">dijkstra(start)</code> - <code class=\"language-text\">start</code>를 시작 노드로 하여 각 노드들까지의 최단경로를 구한다.</p>\n<ol>\n<li><code class=\"language-text\">start</code> 노드에 연결되어 있는 다른 노드들까지의 거리를 저장한다.</li>\n<li><code class=\"language-text\">start</code> 노드에서 가장 가까운 노드를 기준 노드로 설정한다.</li>\n<li>만약 저장된 거리보다 기준 노드를 거쳐서 다른 노드로 가는 거리가 더 작다면 거리를 갱신한다.</li>\n<li>다시 <code class=\"language-text\">start</code> 노드에서 가장 가까운 노드를 기준 노드로 설정한다.</li>\n<li>3번, 4번 과정을 반복한다.</li>\n</ol>\n</li>\n</ul>\n<p>처음 제출할 때는  A -> B 로 가는 노선이 여러 개일 수 있다는 점을 고려하지 않고 입력값을 받아서 틀렸었다.<br>\n아래 코드에서는 입력값을 받을 때 조건문을 통해서 이 문제를 처리했는데 파이썬에서 제공하는 <code class=\"language-text\">heapq</code> 모듈의 우선순위 큐를 사용하면 이 문제를 쉽게 해결할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nm <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nINF <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e9</span><span class=\"token punctuation\">)</span>\nbus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> cost <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> bus<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> cost<span class=\"token punctuation\">:</span>\n    bus<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cost\n\nstart<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ndistance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nvisited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getMinIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  minv <span class=\"token operator\">=</span> INF\n  index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">elif</span> distance<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> minv<span class=\"token punctuation\">:</span>\n      minv <span class=\"token operator\">=</span> distance<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      index <span class=\"token operator\">=</span> i\n  <span class=\"token keyword\">return</span> index\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> bus<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      distance<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bus<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n  distance<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    m <span class=\"token operator\">=</span> getMinIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    visited<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> bus<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> INF<span class=\"token punctuation\">:</span>\n        c <span class=\"token operator\">=</span> distance<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> bus<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> c <span class=\"token operator\">&lt;</span> distance<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n          distance<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n\ndijkstra<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  </code></pre></div>","frontmatter":{"title":"백준 1916번 - 최소비용 구하기","date":"November 14, 2022","update":"November 14, 2022","tags":["python","dijkstra","graph"],"series":"Baekjoon"},"fields":{"slug":"/1916번-최소비용-구하기/","readingTime":{"minutes":4.85}}},"seriesList":{"edges":[{"node":{"id":"376b1c3a-a145-5443-ba01-4dbe382929cc","fields":{"slug":"/2110번-공유기-설치/"},"frontmatter":{"title":"백준 2110번 - 공유기 설치"}}},{"node":{"id":"de041a93-b2d9-57d5-8da3-d9e5712918c2","fields":{"slug":"/1389번-케빈-베이컨의-6단계-법칙/"},"frontmatter":{"title":"백준 1389번 - 케빈 베이컨의 6단계 법칙"}}},{"node":{"id":"f0ffb10c-d219-5cd1-8255-f1800d078342","fields":{"slug":"/1309번-동물원/"},"frontmatter":{"title":"백준 1309번 - 동물원"}}},{"node":{"id":"09c6279b-ab5c-5526-8bad-50a80101906f","fields":{"slug":"/1038번-감소하는-수/"},"frontmatter":{"title":"백준 1038번 - 감소하는 수"}}},{"node":{"id":"b41a61e5-0952-5829-b572-ba5809701aec","fields":{"slug":"/1541번-잃어버린-괄호/"},"frontmatter":{"title":"백준 1541번 - 잃어버린 괄호"}}},{"node":{"id":"83cb17cb-586e-5695-a214-f9b3dec015c3","fields":{"slug":"/14502번-연구소/"},"frontmatter":{"title":"백준 14502번 - 연구소"}}},{"node":{"id":"bd719565-5af9-5447-b2bd-06f061b5d856","fields":{"slug":"/10026번-적록색약/"},"frontmatter":{"title":"백준 10026번 - 적록색약"}}},{"node":{"id":"f5cb47e4-3119-51bb-b572-ae3a7e0e5116","fields":{"slug":"/1916번-최소비용-구하기/"},"frontmatter":{"title":"백준 1916번 - 최소비용 구하기"}}},{"node":{"id":"62d7fe39-c1b4-5bd0-a62f-7d545dba554c","fields":{"slug":"/7569번-토마토/"},"frontmatter":{"title":"백준 7569번 - 토마토"}}},{"node":{"id":"2e5f57b2-e31c-57fb-842c-a4774095d227","fields":{"slug":"/1697번-숨바꼭질/"},"frontmatter":{"title":"백준 1697번 - 숨바꼭질"}}},{"node":{"id":"9406a112-3c7f-5e08-aaba-1ebe9e350bee","fields":{"slug":"/12851번-숨바꼭질2/"},"frontmatter":{"title":"백준 12851번 - 숨바꼭질2"}}},{"node":{"id":"782278d2-8484-5221-8518-f0eec8b1a501","fields":{"slug":"/1068번-트리/"},"frontmatter":{"title":"백준 1068번 - 트리"}}},{"node":{"id":"85015140-3a22-5cbf-9a8e-ee68c78e41e9","fields":{"slug":"/2579번-계단-오르기/"},"frontmatter":{"title":"백준 2579번 - 계단 오르기"}}},{"node":{"id":"cbe23adf-e766-588b-ab57-ab866c078d51","fields":{"slug":"/1058번-친구/"},"frontmatter":{"title":"백준 1058번 - 친구"}}},{"node":{"id":"d0f7c30c-93b9-5286-b90d-6b3f807a6e15","fields":{"slug":"/2467번-용액/"},"frontmatter":{"title":"백준 2467번 - 용액"}}},{"node":{"id":"875d28fe-5bef-5192-a8d5-c32bf808fdd1","fields":{"slug":"/1072번-게임/"},"frontmatter":{"title":"백준 1072번 - 게임"}}},{"node":{"id":"2797eec7-9d20-55a5-8cc5-07c27851dc2c","fields":{"slug":"/1002번-터렛/"},"frontmatter":{"title":"백준 1002번 - 터렛"}}},{"node":{"id":"211424b0-1492-59ca-b35d-185db0d537c3","fields":{"slug":"/12865번-평범한-배낭/"},"frontmatter":{"title":"백준 12865번 - 평범한 배낭"}}}]},"previous":{"fields":{"slug":"/ubuntu-sudo-apt-get-update/"},"frontmatter":{"title":"Ubuntu sudo apt-get update 다음 서명들은 공개키가 없기 때문에 인증할 수 없습니다"}},"next":{"fields":{"slug":"/7569번-토마토/"},"frontmatter":{"title":"백준 7569번 - 토마토"}}},"pageContext":{"id":"f5cb47e4-3119-51bb-b572-ae3a7e0e5116","series":"Baekjoon","previousPostId":"9dc42957-bf8a-5400-93e3-4f41385c9f04","nextPostId":"62d7fe39-c1b4-5bd0-a62f-7d545dba554c"}},"staticQueryHashes":[]}