{"componentChunkName":"component---src-templates-post-jsx","path":"/리스트-중복제거/","result":{"data":{"site":{"siteMetadata":{"title":"ckdhkdwns"}},"markdownRemark":{"id":"17126a96-98d7-53db-bb54-21e11b3608a7","excerpt":"을 사용하여 중복 제거하기 은 파이썬의 내장 자료구조로, 중복된 값을 허용하지 않는 특징이 있습니다. 이 특징을 이용하여 리스트의 중복을 제거할 수 있습니다. 으로 변환하면 중복된 값들이 자동으로 제거되며, 이후 다시 로 변환하여 원하는 결과를 얻을 수 있습니다. 이 방법의 단점은 원래 리스트의 순서가 유지되지 않을 수 있다는 것입니다. 은 순서를 고려하…","html":"<h3><code class=\"language-text\">set</code>을 사용하여 중복 제거하기</h3>\n<p><code class=\"language-text\">set</code>은 파이썬의 내장 자료구조로, 중복된 값을 허용하지 않는 특징이 있습니다. 이 특징을 이용하여 리스트의 중복을 제거할 수 있습니다. <code class=\"language-text\">set</code>으로 변환하면 중복된 값들이 자동으로 제거되며, 이후 다시 <code class=\"language-text\">list</code>로 변환하여 원하는 결과를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_duplicates_with_set</span><span class=\"token punctuation\">(</span>input_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>input_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmy_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nno_duplicates <span class=\"token operator\">=</span> remove_duplicates_with_set<span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>no_duplicates<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 방법의 단점은 <strong>원래 리스트의 순서가 유지되지 않을 수 있다는 것</strong>입니다. <code class=\"language-text\">set</code>은 순서를 고려하지 않기 때문에, 변환 과정에서 원래 순서가 뒤섞일 수 있습니다.</p>\n<h3>리스트 컴프리헨션과 <code class=\"language-text\">in</code> 연산자를 사용하여 중복 제거하기</h3>\n<p>리스트 컴프리헨션은 리스트를 생성하는 간결하고 효율적인 방법입니다. 이를 이용하여, 원래 리스트의 순서를 유지하면서 중복을 제거할 수 있습니다. 새로운 리스트에 값이 없는 경우에만 추가하는 방식으로 중복을 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_duplicates_with_list_comprehension</span><span class=\"token punctuation\">(</span>input_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    no_duplicates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span>no_duplicates<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> input_list <span class=\"token keyword\">if</span> x <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> no_duplicates<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> no_duplicates\n\nmy_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nno_duplicates <span class=\"token operator\">=</span> remove_duplicates_with_list_comprehension<span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>no_duplicates<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 방법은 <strong>원래 리스트의 순서를 유지하면서 중복을 제거</strong>할 수 있지만, 리스트의 크기가 큰 경우에는 <strong>상대적으로 느릴 수 있습니다.</strong> 리스트에 요소가 이미 있는지 확인하기 위해 <code class=\"language-text\">in</code> 연산자를 사용하면 선형 시간이 소요되기 때문입니다.</p>\n<h3><code class=\"language-text\">OrderedDict</code>를 사용하여 중복 제거하기</h3>\n<p><code class=\"language-text\">OrderedDict</code>는 파이썬의 <code class=\"language-text\">collections</code> 모듈에서 제공하는 자료구조로, 순서가 있는 딕셔너리입니다. 이를 이용하면, 중복을 제거하면서 원래 리스트의 순서를 유지할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">remove_duplicates_with_ordered_dict</span><span class=\"token punctuation\">(</span>input_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>OrderedDict<span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>input_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmy_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nno_duplicates <span class=\"token operator\">=</span> remove_duplicates_with_ordered_dict<span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>no_duplicates<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">OrderedDict.fromkeys()</code> 함수는 입력 리스트의 요소를 키로 사용하여 <code class=\"language-text\">OrderedDict</code>를 생성합니다. 중복된 키는 하나만 유지되며, 이 과정에서 중복이 제거됩니다. 추가적으로, <code class=\"language-text\">OrderedDict</code>는 요소의 삽입 순서를 유지하므로 원래 리스트의 순서도 보존됩니다. 이후 <code class=\"language-text\">list()</code> 함수를 사용하여 <code class=\"language-text\">OrderedDict</code>를 일반 리스트로 변환하면 원하는 결과를 얻을 수 있습니다.</p>\n<p>이 방법은 중복을 제거하면서 원래 리스트의 순서를 유지할 수 있으며, 큰 리스트에서도 상대적으로 빠른 성능을 제공합니다.</p>\n<h3>정리</h3>\n<p>세 가지 방법 중 하나를 선택하여 리스트 내의 중복을 제거할 수 있습니다. 상황에 따라 가장 적합한 방법을 선택하면 됩니다.</p>\n<ol>\n<li><code class=\"language-text\">set</code>을 사용하는 방법은 가장 간단하지만, 원래 리스트의 순서를 유지하지 못할 수 있습니다.</li>\n<li>리스트 컴프리헨션과 <code class=\"language-text\">in</code> 연산자를 사용하는 방법은 원래 순서를 유지하면서 중복을 제거할 수 있지만, 큰 리스트에서는 상대적으로 느릴 수 있습니다.</li>\n<li><code class=\"language-text\">OrderedDict</code>를 사용하는 방법은 원래 순서를 유지하면서 중복을 제거할 수 있고, 큰 리스트에서도 빠른 성능을 제공합니다.\n따라서 원래 리스트의 순서가 중요한지, 성능이 중요한지 등 여러 요소를 고려하여 가장 적절한 방법을 선택하면 됩니다.</li>\n</ol>","frontmatter":{"title":"[Python] 리스트 내 원소들의 중복을 제거하기","date":"April 21, 2023","update":null,"tags":["python"],"series":"Python"},"fields":{"slug":"/리스트-중복제거/","readingTime":{"minutes":4.74}}},"seriesList":{"edges":[{"node":{"id":"17126a96-98d7-53db-bb54-21e11b3608a7","fields":{"slug":"/리스트-중복제거/"},"frontmatter":{"title":"[Python] 리스트 내 원소들의 중복을 제거하기"}}}]},"previous":{"fields":{"slug":"/1058번-친구/"},"frontmatter":{"title":"1058번 친구 Python"}},"next":null},"pageContext":{"id":"17126a96-98d7-53db-bb54-21e11b3608a7","series":"Python","previousPostId":"cbe23adf-e766-588b-ab57-ab866c078d51","nextPostId":null}},"staticQueryHashes":[]}