{"componentChunkName":"component---src-templates-post-jsx","path":"/2110번-공유기-설치/","result":{"data":{"site":{"siteMetadata":{"title":"ckdhkdwns"}},"markdownRemark":{"id":"50715778-56af-5e79-8e0e-7fdd09ab1bae","excerpt":"백준 2110번 - 공유기 설치 문제 도현이의 집 N개가 수직선 위에 있다. 각각의 집의 좌표는 x1, ..., xN이고, 집 여러개가 같은 좌표를 가지는 일은 없다. 도현이는 언제 어디서나 와이파이를 즐기기 위해서 집에 공유기 C개를 설치하려고 한다. 최대한 많은 곳에서 와이파이를 사용하려고 하기 때문에, 한 집에는 공유기를 하나만 설치할 수 있고, 가…","html":"<p><a href=\"https://www.acmicpc.net/problem/2110\">백준 2110번 - 공유기 설치</a></p>\n<h2>문제</h2>\n<p>도현이의 집 N개가 수직선 위에 있다. 각각의 집의 좌표는 x1, ..., xN이고, 집 여러개가 같은 좌표를 가지는 일은 없다.</p>\n<p>도현이는 언제 어디서나 와이파이를 즐기기 위해서 집에 공유기 C개를 설치하려고 한다. 최대한 많은 곳에서 와이파이를 사용하려고 하기 때문에, 한 집에는 공유기를 하나만 설치할 수 있고, 가장 인접한 두 공유기 사이의 거리를 가능한 크게 하여 설치하려고 한다.</p>\n<p>C개의 공유기를 N개의 집에 적당히 설치해서, 가장 인접한 두 공유기 사이의 거리를 최대로 하는 프로그램을 작성하시오.</p>\n<h2>입력</h2>\n<p>첫째 줄에 집의 개수 N (2 ≤ N ≤ 200,000)과 공유기의 개수 C (2 ≤ C ≤ N)이 하나 이상의 빈 칸을 사이에 두고 주어진다. 둘째 줄부터 N개의 줄에는 집의 좌표를 나타내는 xi (0 ≤ xi ≤ 1,000,000,000)가 한 줄에 하나씩 주어진다.</p>\n<h2>출력</h2>\n<p>첫째 줄에 가장 인접한 두 공유기 사이의 최대 거리를 출력한다.</p>\n<h2>풀이</h2>\n<p>처음에는 완전탐색으로 접근했었다.   </p>\n<ol>\n<li>공유기를 설치하는 집의 조합을 모두 구한다.</li>\n<li>각 조합마다 공유기 사이의 거리 중 최솟값을 구한다.</li>\n<li>그 중 최댓값을 구한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#값 입력</span>\nn<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nhome_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    home_pos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \nhome_pos<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#정렬</span>\ncombinations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#조합 구하기</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">getCombinations</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> depth <span class=\"token operator\">==</span> c<span class=\"token punctuation\">:</span>\n        combinations<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            v <span class=\"token operator\">=</span> li<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            temp1 <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n            temp2 <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">del</span> temp1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            temp2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            getCombinations<span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">,</span> temp2<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            \ngetCombinations<span class=\"token punctuation\">(</span>home_pos<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#가장 인접한 두 공유기 사이의 거리</span>\ndistance<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> combinations<span class=\"token punctuation\">:</span>\n    temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        temp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> distance<span class=\"token punctuation\">:</span>\n        distance <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">#그 중 최대거리 출력</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span></code></pre></div>\n<p>하지만 메모리초과로 인해 고생하다가 이분탐색으로 해결해야 함을 알았다. </p>\n<hr>\n<h2>이분 탐색(Binary Search)</h2>\n<ul>\n<li>이진 탐색이란 데이터가 정렬돼 있는 배열에서 탐색 범위를 절반식 잘라서  값을 찾아내는 알고리즘이다. </li>\n<li>데이터가 정렬되어 있어야 사용할 수 있다.</li>\n<li><code class=\"language-text\">start</code>, <code class=\"language-text\">mid</code>, <code class=\"language-text\">end</code> 3개의 변수를 통해 이분 탐색을 할 수 있다.   </li>\n</ul>\n<p>이를 통해서 코드를 짰다.</p>\n<ol>\n<li><code class=\"language-text\">start</code>와 <code class=\"language-text\">end</code> 를 각각 집 사이의 최소거리, 최대거리로 설정한다.</li>\n<li>반복문에서 <code class=\"language-text\">mid</code>의 값을 설정한다.</li>\n<li><code class=\"language-text\">mid</code>의 거리를 두고 공유기를 설치할 수 있으면 <code class=\"language-text\">start</code>를 <code class=\"language-text\">mid+1</code> 위치로 이동한다. 만약 설치할 수 없다면 <code class=\"language-text\">end</code>를 <code class=\"language-text\">mid-1</code>의 위치로 이동한다.</li>\n<li>결과 출력  </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n\n<span class=\"token comment\">#값 입력</span>\nn<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nhome_pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    home_pos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \nhome_pos<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#정렬</span>\n\nstart <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">#집 사이의 최소거리</span>\nend <span class=\"token operator\">=</span> home_pos<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> home_pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#집 사이의 최대거리</span>\nresult <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">#이분 탐색</span>\n<span class=\"token keyword\">while</span> start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">:</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\">#공유기의 개수</span>\n    v <span class=\"token operator\">=</span> home_pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">#최소 좌표</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> home_pos<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">>=</span> v <span class=\"token operator\">+</span> mid<span class=\"token punctuation\">:</span>  <span class=\"token comment\">#mid만큼 거리를 두고 공유기를 설치할 수 있으면 count ++</span>\n            v <span class=\"token operator\">=</span> i\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            \n    <span class=\"token comment\">#count가 c보다 크면 조건 성립, 거리 늘림</span>\n    <span class=\"token keyword\">if</span> count <span class=\"token operator\">>=</span> c<span class=\"token punctuation\">:</span>\n        start <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        result <span class=\"token operator\">=</span> mid\n    <span class=\"token comment\">#아니라면 거리 좁힘</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"2110번 공유기 설치 Python","date":"July 24, 2022","update":null,"tags":["python","binary search"],"series":"baekjoon"},"fields":{"slug":"/2110번-공유기-설치/","readingTime":{"minutes":4.45}}},"seriesList":{"edges":[{"node":{"id":"50715778-56af-5e79-8e0e-7fdd09ab1bae","fields":{"slug":"/2110번-공유기-설치/"},"frontmatter":{"title":"2110번 공유기 설치 Python"}}},{"node":{"id":"bca6c149-9f25-565a-ba6f-4b9876a7f58e","fields":{"slug":"/1389번-케빈-베이컨의-6단계-법칙/"},"frontmatter":{"title":"1389번 케빈 베이컨의 6단계 법칙 Python"}}},{"node":{"id":"c155e8eb-ef64-5fae-8960-dde038bfe883","fields":{"slug":"/1309번-동물원/"},"frontmatter":{"title":"1309번 동물원 Python"}}},{"node":{"id":"552339f4-3461-57c8-80d3-f8f866e04c50","fields":{"slug":"/1038번-감소하는-수/"},"frontmatter":{"title":"1038번 감소하는 수 Python"}}},{"node":{"id":"d820945d-f3c5-557e-b963-04bc6db32ae2","fields":{"slug":"/1541번-잃어버린-괄호/"},"frontmatter":{"title":"1541번 잃어버린 괄호 Python"}}},{"node":{"id":"b1dc091b-83a2-566d-afab-2827a1104a54","fields":{"slug":"/14502번-연구소/"},"frontmatter":{"title":"14502번 연구소 Python"}}},{"node":{"id":"e5f06c57-c1dc-5c9c-98e8-6843b4b6bb49","fields":{"slug":"/10026번-적록색약/"},"frontmatter":{"title":"10026번 적록색약 Python"}}},{"node":{"id":"bde52d5c-c819-53cb-ac7b-18028102b9ba","fields":{"slug":"/1916번-최소비용-구하기/"},"frontmatter":{"title":"1916번 최소비용 구하기 Python"}}},{"node":{"id":"97e8ff13-b1eb-5147-beb6-fc2308cca025","fields":{"slug":"/7569번-토마토/"},"frontmatter":{"title":"7569번 토마토 Python"}}},{"node":{"id":"e945eb81-556e-58db-83da-78a225420e0d","fields":{"slug":"/1698번-숨바꼭질/"},"frontmatter":{"title":"1698번 숨바꼭질"}}},{"node":{"id":"e3e21a07-fcec-5ee0-be6d-a47034d7c307","fields":{"slug":"/12851번-숨바꼭질2/"},"frontmatter":{"title":"12851번 숨바꼭질2"}}}]},"previous":{"fields":{"slug":"/sql-injection/"},"frontmatter":{"title":"SQL Intection 실습"}},"next":{"fields":{"slug":"/1389번-케빈-베이컨의-6단계-법칙/"},"frontmatter":{"title":"1389번 케빈 베이컨의 6단계 법칙 Python"}}},"pageContext":{"id":"50715778-56af-5e79-8e0e-7fdd09ab1bae","series":"baekjoon","previousPostId":"1b25e811-72ac-512b-9522-49560e93189a","nextPostId":"bca6c149-9f25-565a-ba6f-4b9876a7f58e"}},"staticQueryHashes":[]}